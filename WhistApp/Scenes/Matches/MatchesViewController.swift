//
//  MatchesViewController.swift
//  WhistApp
//
//  Created by Christian Graver on 14/01/2021.
//  Copyright (c) 2021 Gravr. All rights reserved.
//
//  This file was generated by the Daman Clean Swift Xcode Templates
//  with inspiration from http://clean-swift.com
//

import UIKit

protocol MatchesDisplayLogic: class {
    func displayMatches(viewModel: [Matches.DisplayData.Match])
}

class MatchesViewController: UIViewController {
    
    // MARK: - Outlets
    @IBOutlet weak var matchesTableView: UITableView! {
        didSet {
            matchesTableView.dataSource = self
            matchesTableView.delegate = self
            matchesTableView.register(UINib(nibName: "MatchCell", bundle: nil), forCellReuseIdentifier: "MatchCell")
            matchesTableView.separatorStyle = .none
            matchesTableView.backgroundColor = .clear
        }
    }
    // MARK: - Properties
    var interactor: MatchesBusinessLogic?
    var router: (NSObjectProtocol & MatchesRoutingLogic & MatchesDataPassing)?
    var matches: [Matches.DisplayData.Match] = []
    
    // MARK: - Init
    class func instantiate() -> MatchesViewController {
        let name = "\(MatchesViewController.self)"
        let storyboard = UIStoryboard(name: name, bundle: nil)
        let vc = storyboard.instantiateViewController(withIdentifier: name) as! MatchesViewController
        vc.setup()
        return vc
    }
    
    // MARK: - Setup
    private func setup() {
        let viewController = self
        let interactor = MatchesInteractor(repository: ParseRepository.instance)
        let presenter = MatchesPresenter()
        let router = MatchesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        viewCreated()
    }
    
    // MARK: - Interactor interaction
    private func viewCreated() {
        interactor?.viewCreated(request: .init())
    }
    
    // MARK: - Actions
    
    // MARK: - Misc
    private func setupView() {
        self.navigationItem.title = "Matches"
    }
}

// MARK: - MatchesDisplayLogic
extension MatchesViewController: MatchesDisplayLogic {
    func displayMatches(viewModel: [Matches.DisplayData.Match]) {
        matches = viewModel
        matchesTableView.reloadData()
    }
}

// MARK: - UITableViewDelegate
extension MatchesViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router?.matchCellSelected(index: indexPath.row)
    }
}

// MARK: - UITableViewDataSource
extension MatchesViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return matches.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        var cell = UITableViewCell()
        if let matchCell = tableView.dequeueReusableCell(withIdentifier: "MatchCell", for: indexPath) as? MatchCell,
           let match = matches[safe: indexPath.row] {
            matchCell.setup(viewModel: match)
            matchCell.selectionStyle = .none
            cell = matchCell
        }
        return cell
    }
}
